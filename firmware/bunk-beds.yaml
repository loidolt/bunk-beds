esphome:
  name: bunk-beds

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "lT5URyVS9py/Rk4e8+kARL+a292Rat+UxUDMvCw6CDI="

ota:
  password: "e9a632be090b6198357c72948e6a0681"

# Enable Web server.
web_server:
  port: 80

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: bunk-beds ESPHome Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: bunk-beds IP
    ssid:
      name: bunk-beds SSID
    bssid:
      name: bunk-beds BSSID

  # State Machine Text Sensors
  - platform: template
    name: "Top Bunk Button"
    id: top_bunk_button
    icon: "mdi:toggle-switch"
    on_value: # When a state is set
      then:
        - if:
            condition:
              text_sensor.state:
                id: top_bunk_button
                state: ""
            else: # If non-empty
              - delay: 20ms
              - text_sensor.template.publish:
                  id: top_bunk_button
                  state: !lambda 'return "";' # Reset to empty

  - platform: template
    name: "Bottom Bunk Button"
    id: bottom_bunk_button
    icon: "mdi:toggle-switch"
    on_value: # When a state is set
      then:
        - if:
            condition:
              text_sensor.state:
                id: bottom_bunk_button
                state: ""
            else: # If non-empty
              - delay: 20ms
              - text_sensor.template.publish:
                  id: bottom_bunk_button
                  state: !lambda 'return "";' # Reset to empty

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Optional manual IP
  manual_ip:
    static_ip: 192.168.55.208
    gateway: 192.168.55.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bunk-Beds Fallback Hotspot"
    password: "vEUBkCaD0VNr"

captive_portal:

sensor:
  # Uptime sensor.
  - platform: uptime
    name: bunk-beds Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: bunk-beds WiFi Signal
    update_interval: 60s

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO16
      mode: INPUT_PULLUP
    id: raw_top_bunk_button
    internal: true
    filters:
      - invert:
      - delayed_on: 30ms
      - delayed_off: 30ms
    on_multi_click:
      - timing:
          - ON for 40ms to 400ms
          - OFF for at least 330ms
        then:
          - text_sensor.template.publish:
              id: top_bunk_button
              state: !lambda 'return "single";'
          - lambda: |-
              auto call = id(top_bunk_lights).turn_on();
              call.set_brightness(0.3);
              call.perform();
      - timing:
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for at least 330ms
        then:
          - text_sensor.template.publish:
              id: top_bunk_button
              state: !lambda 'return "double";'
          - lambda: |-
              auto call = id(top_bunk_lights).turn_on();
              call.set_brightness(0.7);
              call.perform();

      - timing:
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for at least 50ms
        then:
          - text_sensor.template.publish:
              id: top_bunk_button
              state: !lambda 'return "triple";'
          - lambda: |-
              auto call = id(top_bunk_lights).turn_on();
              call.set_brightness(1.0);
              call.perform();

      - timing:
          - ON for at least 2s
        then:
          - text_sensor.template.publish:
              id: top_bunk_button
              state: !lambda 'return "hold";'
          - lambda: |-
              auto call = id(top_bunk_lights).turn_off();
              call.perform();

  - platform: gpio
    pin:
      number: GPIO19
      mode: INPUT_PULLUP
    id: raw_bottom_bunk_button
    internal: true
    filters:
      - invert:
      - delayed_on: 30ms
      - delayed_off: 30ms
    on_multi_click:
      - timing:
          - ON for 40ms to 400ms
          - OFF for at least 330ms
        then:
          - text_sensor.template.publish:
              id: bottom_bunk_button
              state: !lambda 'return "single";'
          - lambda: |-
              auto call = id(bottom_bunk_lights).turn_on();
              call.set_brightness(0.3);
              call.perform();
      - timing:
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for at least 330ms
        then:
          - text_sensor.template.publish:
              id: bottom_bunk_button
              state: !lambda 'return "double";'
          - lambda: |-
              auto call = id(bottom_bunk_lights).turn_on();
              call.set_brightness(0.7);
              call.perform();
      - timing:
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for at least 50ms
        then:
          - text_sensor.template.publish:
              id: bottom_bunk_button
              state: !lambda 'return "triple";'
          - lambda: |-
              auto call = id(bottom_bunk_lights).turn_on();
              call.set_brightness(1.0);
              call.perform();
      - timing:
          - ON for at least 2s
        then:
          - text_sensor.template.publish:
              id: bottom_bunk_button
              state: !lambda 'return "hold";'
          - lambda: |-
              auto call = id(bottom_bunk_lights).turn_off();
              call.perform();

light:
  - platform: partition
    name: "Top Bunk Lights"
    id: top_bunk_lights
    segments:
      - id: top_bunk_left_light
        from: 0
        to: 23
      - id: top_bunk_right_light
        from: 0
        to: 23
    color_correct: [100%, 87%, 74%]
    default_transition_length: 1s

  - platform: partition
    name: "Bottom Bunk Lights"
    id: bottom_bunk_lights
    segments:
      - id: bottom_bunk_cubby_light
        from: 0
        to: 23
      - id: bottom_bunk_face_light
        from: 0
        to: 23
    color_correct: [100%, 87%, 74%]
    default_transition_length: 1s

  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO18
    num_leds: 24
    name: "Top Bunk Left Light"
    id: top_bunk_left_light
    color_correct: [100%, 87%, 74%]
    default_transition_length: 1s

  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO17
    num_leds: 24
    name: "Top Bunk Right Light"
    id: top_bunk_right_light
    color_correct: [100%, 87%, 74%]
    default_transition_length: 1s

  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO22
    num_leds: 24
    name: "Bottom Bunk Cubby Light"
    id: bottom_bunk_cubby_light
    color_correct: [100%, 87%, 74%]
    default_transition_length: 1s

  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO21
    num_leds: 24
    name: "Bottom Bunk Face Light"
    id: bottom_bunk_face_light
    color_correct: [100%, 87%, 74%]
    default_transition_length: 1s
